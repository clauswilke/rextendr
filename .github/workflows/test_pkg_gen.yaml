on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

name: Test package generation

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }} / ${{ matrix.config.rust-version }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release', rust-version: 'stable-gnu',  rtools-version: '42'}
          - {os: windows-latest, r: 'release', rust-version: 'stable-msvc', rtools-version: '42'}
          - {os: windows-latest, r: 'devel',   rust-version: 'stable-msvc'}
          # For R < 4.2, the MSVC toolchain is used to support cross-compilation for the 32-bit.
          # TODO: Remove this runner when we drop the support for R < 4.2
          - {os: windows-latest, r: '4.1',     rust-version: 'stable-msvc'}

          - {os: macOS-latest,   r: 'release', rust-version: 'stable'}

          - {os: ubuntu-20.04,   r: 'release', rust-version: 'stable'}
          - {os: ubuntu-20.04,   r: 'devel',   rust-version: 'stable'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.config.rust-version }}

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          rtools-version: ${{ matrix.config.rtools-version }}
          # TODO: enable RSPM when all the packages are available
          use-public-rspm: false

      - name: Set up pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          # increment this version number when we need to clear the cache
          cache-version: 2
          extra-packages: rcmdcheck, devtools, usethis

      - name: Configure Windows (R >= 4.2)
        if: startsWith(runner.os, 'Windows') && matrix.config.r != '4.1'
        run: |
          rustup target add x86_64-pc-windows-gnu
          echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      # TODO: Remove this runner when we drop the support for R < 4.2
      - name: Configure Windows (R < 4.2)
        if: startsWith(runner.os, 'Windows') && matrix.config.r == '4.1'
        run: |
          rustup target add x86_64-pc-windows-gnu
          rustup target add i686-pc-windows-gnu
          echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Test package generation
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          # preperation
          remotes::install_local(force = TRUE)
          temp_dir <- tempdir()
          pkg_dir <- file.path(temp_dir, "testpkg")
          dir.create(pkg_dir, recursive = TRUE)
          setwd(pkg_dir)
          Sys.setenv(REXTENDR_TEST_PKG_ROOT = getwd())
          devtools::create(".")
          usethis::proj_activate(".")
          rextendr::use_extendr()
          usethis::use_mit_license()
          usethis::use_testthat()
          brio::write_lines(
            c(
              "test_that(\"`hello_world()` works\", {",
              "  expect_equal(hello_world(), \"Hello world!\")",
              "})",
              "test_that(\"`rextendr::use_extendr()` works\", {",
              "  wrap_path <- file.path(Sys.getenv(\"REXTENDR_TEST_PKG_ROOT\"), \"R\", \"extendr-wrappers.R\")",
              "  expect_equal(readLines(wrap_path, 1), \"# Generated by extendr: Do not edit by hand\")",
              "})"
            ),
            file.path("tests", "testthat", "test-hello.R")
          )

          # test NOT_CRAN envvar
          brio::write_lines(
            c(
              "if [ \"$NOT_CRAN\" != \"true\" ]; then",
              "  exit 1",
              "fi"
            ),
            file.path("configure")
          )
          Sys.chmod("configure", "0755")

          # check if rextendr::document() compiles and generates wrappers properly
          rextendr::document()
          rcmdcheck::rcmdcheck(
              path = ".",
              args = c("--no-manual", "--as-cran"),
              error_on = "warning",
              check_dir = "check_use_extendr"
          )

          library_path <- rextendr:::get_library_path()
          library_mtime_before <- file.info(library_path)$mtime
          wrappers_path <- file.path("R", "extendr-wrappers.R")
          wrappers_mtime_before <- file.info(wrappers_path)$mtime

          # check if rextendr::document() don't re-generate wrappers when unnecessary
          rextendr::document()
          stopifnot(library_mtime_before == file.info(library_path)$mtime)
          stopifnot(wrappers_mtime_before == file.info(wrappers_path)$mtime)

          # check if force = TRUE forces re-generating wrappers, but not compile
          rextendr::register_extendr(force = TRUE)
          stopifnot(library_mtime_before == file.info(library_path)$mtime)
          stopifnot(wrappers_mtime_before < file.info(wrappers_path)$mtime)

          wrappers_mtime_before <- file.info(wrappers_path)$mtime

          # check if compile = TRUE forces compile, and accordingly the wrapper generation
          rextendr::register_extendr(compile = TRUE)
          stopifnot(library_mtime_before < file.info(library_path)$mtime)
          stopifnot(wrappers_mtime_before < file.info(wrappers_path)$mtime)
        shell: Rscript {0}
